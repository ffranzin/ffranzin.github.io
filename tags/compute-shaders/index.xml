<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compute Shaders on Flavio Franzin</title>
    <link>https://ffranzin.github.io/tags/compute-shaders/</link>
    <description>Recent content in Compute Shaders on Flavio Franzin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language><atom:link href="https://ffranzin.github.io/tags/compute-shaders/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Break Glass</title>
      <link>https://ffranzin.github.io/projects/creations/breaking-glass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ffranzin.github.io/projects/creations/breaking-glass/</guid>
      <description>.center { display: block; margin-left: auto; margin-right: auto; max-width: 95%; } .row { display: flex; margin-left: auto; margin-right: auto; max-width: 95%; } .column { flex: 25%; padding: 2px; } video { width: 70%; height: auto; display: block; margin-left: auto; margin-right: auto; } #player-overlay { position: absolute; display: none; top: 0; left: 0; width: 100%; height: 100%; background-color: #000 z-index:999; }  I prototyped two solutions to break glass.</description>
    </item>
    
    <item>
      <title>Grass Deformation and Terrain Trails</title>
      <link>https://ffranzin.github.io/projects/creations/grass-and-terrain-deformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ffranzin.github.io/projects/creations/grass-and-terrain-deformation/</guid>
      <description>* { box-sizing: border-box; } .img-container { float: left; width: 25%; padding: 2px; } .video-container { float: left; width: 50%; padding: 2px; } .clearfix::after { content: &#34;&#34;; clear: both; display: table; } .center { display: block; margin-left: auto; margin-right: auto; max-width: 50%; }  I developed a solution for the real-time long-lasting grasses deformation and terrain trails according to the vehicles&#39; and characters&#39; movements. This is kept throughout the simulation with little memory overhead.</description>
    </item>
    
    <item>
      <title>Procedural Vegetation System</title>
      <link>https://ffranzin.github.io/projects/creations/procedural-vegetation-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ffranzin.github.io/projects/creations/procedural-vegetation-system/</guid>
      <description>* { box-sizing: border-box; } .img-container-x4 { float: left; width: 33%; padding: 1px; } .img-container-x4:hover img { float: left; width: 150%; padding: 1px; } .clearfix::after { content: &#34;&#34;; clear: both; display: table; } video { width: 70%; height: auto; display: block; margin-left: auto; margin-right: auto; }  To solve the limitations of an existing solution, I designed and developed a robust GPU-based vegetation system capable of handling thousands of trees and small plants efficiently in real-time.</description>
    </item>
    
    <item>
      <title>Vector Data Access Optimization</title>
      <link>https://ffranzin.github.io/projects/creations/vector-feature-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ffranzin.github.io/projects/creations/vector-feature-map/</guid>
      <description>video { width: 70%; height: auto; display: block; margin-left: auto; margin-right: auto; } #player-overlay { position: absolute; display: none; top: 0; left: 0; width: 100%; height: 100%; background-color: #000 z-index:999; }  I developed a dynamic structure to optimize access to mass datasets of polygons and polylines, representing areas like forests, lakes, roads, and rivers. This structure accelerated the terrain rendering ーwhich these data are projected by texturingー by +80% on average.</description>
    </item>
    
    <item>
      <title>Water planes mesh generation</title>
      <link>https://ffranzin.github.io/projects/creations/water-bodies-meshes-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ffranzin.github.io/projects/creations/water-bodies-meshes-generation/</guid>
      <description>.center { display: block; margin-left: auto; margin-right: auto; max-width: 95%; } .row { display: flex; margin-left: auto; margin-right: auto; max-width: 95%; } .column { flex: 25%; padding: 2px; }  I designed and guided an intern in developing a tool to generate polygonal meshes from mass polygons and polylines datasets, used to represent water planes for lakes and rivers in 3D scenarios.

Description
This tool was developed to replace an old solution, which had problems with the scalability between junctions of entities, such as river-river (line-line, in the left), rivers-rivers (lines-lines, in the middle), and river-lake (line-polygon, in the right).</description>
    </item>
    
  </channel>
</rss>
